<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class prod_cost{    public function __construct()    {		$this->ci =& get_instance();		$this->ci->load->model('product_model', '', TRUE);		$this->ci->load->model('provider_model', '', TRUE);		$this->ci->load->model('product_provider_model', '', TRUE);		$this->ci->load->model('print_model', '', TRUE);		$this->ci->load->model('config_model', '', TRUE);    }	public function calc_total($dados){		$calc_prod_cost 	= $this->calc_prod_cost($dados);		$calc_print_cost 	= $this->calc_print_cost($dados);	 	$calc_sale_profit 	= $this->calc_sale_profit($dados);    	$config 		= $this->ci->config_model->staticGet();		$gain_unit_val 	= $this->calc_prod_cost($dados);		$print_price = ($calc_print_cost['print_unit_price'] * intval($dados['qty_colors'])) * intval($dados['quantity']);		$product_price = ($calc_prod_cost['product_unit_price'] * intval($dados['quantity']));		$product_unit_price_old = (($calc_print_cost['print_unit_price'] * intval($dados['qty_colors']))) + ($calc_prod_cost['product_unit_price']);		$amount = (2*($product_price + $print_price));		$calc_sale_profit = $this->calc_sale_profit($dados,$amount);		$tax_perc_original					= 0.5;		$gain_unit_val 						= $calc_sale_profit['profit_price_unit'];		$gain_perc							= $this->calc_val_gain($dados);		$final_price_tax_unit				= $calc_prod_cost['tax_unit'];		$final_tax_sale						= $calc_prod_cost['tax_unit'] * $dados['quantity'];		$final_print_price					= $calc_print_cost['print_total_price'] * $dados['quantity'];		$final_amount_sale					= $calc_sale_profit['profit_price_unit'] * $dados['quantity'];		$data = array(			'quantity' 						=> intval($dados['quantity']),			'tax_perc' 						=> floatval($calc_prod_cost['tax_perc']),			'profit_perc' 					=> floatval($calc_sale_profit['profit_perc']),			'product_id' 					=> intval($dados['id']),			'product_original_price'		=> $calc_prod_cost['product_unit_price'] + $calc_prod_cost['discount_unit'],			'product_original_sale_price'	=> $product_unit_price_old / (1 - $tax_perc_original),			'product_unit_price_old'		=> $product_unit_price_old,			'product_unit_price' 			=> $calc_prod_cost['product_unit_price'],			'product_unit_tax' 				=> $calc_prod_cost['tax_unit'],			'product_unit_profit' 			=> $calc_sale_profit['profit_price_unit'],			'provider_id' 					=> intval($calc_prod_cost['provider_id']),			'provider_discount'				=> floatval($calc_prod_cost['discount_perc']),			'print_id' 						=> intval($dados['type_prints']),			'print_name' 					=> $calc_print_cost['print_name'],			'print_description' 			=> $calc_print_cost['print_description'],			'print_unit_price' 				=> $calc_print_cost['print_unit_price'],			'print_unit_tax' 				=> floatval($calc_print_cost['print_unit_price_tax']),			'print_unit_total' 				=> $calc_print_cost['print_unit_price'] + $calc_print_cost['print_unit_price_tax'],			'color_id' 						=> intval($dados['opt_color']),			'color_quantity' 				=> intval($dados['qty_colors']),			);		return $data; 	}    public function calc_prod_cost($dados)    {    	$this->ci =& get_instance();		$this->ci->load->library('web_service');		$product 	= $this->ci->product_model->staticGet($dados['id']);		$config 	= $this->ci->config_model->staticGet();		$params = array('fk_product'=>$dados['id'],'active'=>'1');		$product_provider = $this->ci->product_provider_model->getList($params);		if(count($product_provider)>0){			$count = 0;			foreach ($product_provider as $key => $row) {				$provider 	= $this->ci->provider_model->staticGet($row['fk_provider']);				switch ($provider['type_discount']) {					case '1':						if(($dados ['quantity'] >= $product_provider['range1_start']) and ($dados['quantity'] <= $product_provider['range1_end'])){							$discount = $product_provider['range1_price'];						}elseif (($dados['quantity'] >= $product_provider['range2_start']) and ($dados['quantity'] <= $product_provider['range2_end'])) {							$discount = $product_provider['range2_price'];						}elseif(($dados['quantity'] >= $product_provider['range3_start']) and ($dados['quantity'] <= $product_provider['range3_end'])){							$discount = $product_provider['range3_price'];						}elseif(($dados['quantity'] >= $product_provider['range4_start']) and ($dados['quantity'] <= $product_provider['range4_end'])){							$discount = $product_provider['range4_price'];						}else{							$discount = $product_provider['range5_price'];						}						$calc_discount 					= $this->calc_discount($row['price'], $discount);						$prod[$count]['fk_provider'] 	= $product_provider['fk_provider'];						$prod[$count]['discount_perc'] 	= $provider['discount'];						$prod[$count]['discount'] 		= $discount;						$prod[$count]['price'] 			= $product_provider['price'];						break;					case '2':						$calc_discount 					= $this->calc_discount($row['price'], $provider['discount']);						$prod[$count]['fk_provider'] 	= $provider['id'];						$prod[$count]['discount_perc'] 	= $provider['discount'];						$prod[$count]['discount'] 		= $calc_discount['discount'];						$prod[$count]['price'] 			= $calc_discount['price'];						break;					case '3':						$provider 				= $this->ci->provider_model->staticGet($row['fk_provider']);						if(($dados['quantity'] >= $provider['range1_start']) and ($dados['quantity'] <= $provider['range1_end'])){							$discount = $provider['range1_price'];						}elseif (($dados['quantity'] >= $provider['range2_start']) and ($dados['quantity'] <= $provider['range2_end'])){							$discount = $provider['range2_price'];						}elseif(($dados['quantity'] >= $provider['range3_start']) and ($dados['quantity'] <= $provider['range3_end'])){							$discount = $provider['range3_price'];						}elseif(($dados['quantity'] >= $provider['range4_start']) and ($dados['quantity'] <= $provider['range4_end'])){							$discount = $provider['range4_price'];						}else{							$discount = $provider['range5_price'];						}						$calc_discount 					= $this->calc_discount($row['price'], $discount);						$prod[$count]['fk_provider'] 	= $provider['id'];						$prod[$count]['discount_perc'] 	= $discount;						$prod[$count]['discount'] 		= $calc_discount['discount'];						$prod[$count]['price'] 			= $calc_discount['price'];						break;					case '4':						$params = array(							'code' 	=> $product['code_origin'],							'url' 	=> $provider['url_ws'],							'qty' 	=> $dados['quantity'],							);						$params 				= $this->ci->web_service->getInfo($params);						if(isset($params['producto']))						{							//$prod[$count]['price'] 			= (!is_string($params['producto']['precioAire']))?$params['producto']['precioAire']:$params['producto']['precioMar'];							$prod[$count]['price'] 			= $params['producto']['precioAire'];							//print_r('-->'.$prod[$count]['price']);							$prod[$count]['discount_perc'] 	= 0;							$prod[$count]['discount'] 		= 0;						}						else {							$prod[$count]['price'] 			= 0;							$prod[$count]['discount_perc'] 	= 0;							$prod[$count]['discount'] 		= 0;						}						$prod[$count]['fk_provider'] 	= $provider['id'];						break;					default:						break;				}				$count++;			}			$min_val = $this->min_val($prod);			$prod['price']					= $min_val['price'];			$prod['discount_perc']			= $min_val['discount_perc'];			$prod['discount']				= $min_val['discount'];			$prod['fk_provider']			= $min_val['fk_provider'];		}		else {			$prod['price'] 		= 0;			$prod['discount'] 	= 0;		}		$product_provedor_id 				= $prod['fk_provider'];		$product_unit_price 				= $prod['price'];		$tax_perc 							= $config['tax'];		$tax_unit							= $this->calc_profit($prod['price'], $config['tax']);		$tax_unit							= $tax_unit['profit'];		$discount_perc 						= $prod['discount_perc'];		$discount_unit 						= $prod['discount'];		$total_price_unit 					= $this->calc_profit($prod['price'], $config['tax']);		$total_price_unit 					= $total_price_unit['price'];		$data = array(			'provider_id'		 		=> $product_provedor_id,			'product_unit_price' 		=> $product_unit_price,			'tax_perc' 					=> $tax_perc,			'tax_unit' 					=> $tax_unit,			'discount_perc' 			=> $discount_perc,			'discount_unit' 			=> $discount_unit,			'total_price_unit' 			=> $total_price_unit			);		return $data;     }    public function calc_print_cost($dados)    {    	$config 				= $this->ci->config_model->staticGet();		$print					= $this->ci->print_model->staticGet($dados['type_prints']);		$print_unit_price 		= $this->calc_price_print($dados);		$print_unit_price_tax	= $this->calc_profit($print_unit_price,$config['tax']);		$print_unit_price_tax	= $print_unit_price_tax['profit'];		$print_qty_color 		= (is_numeric($dados['qty_colors']))?$dados['qty_colors']:0;		$print_total_price		= ($print_unit_price + $print_unit_price_tax) * $print_qty_color;				$data = array(			'print_name'			=> $print['name'],			'print_description'		=> $print['description'],			'print_unit_price' 		=> floatval($print_unit_price),			'print_unit_price_tax' 	=> $print_unit_price_tax,			'print_qty_color' 		=> $print_qty_color,			'print_total_price'		=> $print_total_price 			);		return $data;     }	private function calc_price_print($dados){		$print		= $this->ci->print_model->staticGet($dados['type_prints']);		$product 	= $this->ci->product_model->staticGet($dados['id']);				$params = array('fk_product'=>$dados['id'],'active'=>'1');		$product_print = $this->ci->product_print_model->getList($params);		if($dados['quantity']>$print['qty_limit'])		{			if(($dados['quantity'] >= $print['range1_start']) and ($dados['quantity'] <= $print['range1_end'])){				$price = $print['range1_price'];			}elseif (($dados['quantity'] >= $print['range2_start']) and ($dados['quantity'] <= $print['range2_end'])) {				$price = $print['range2_price'];			}elseif(($dados['quantity'] >= $print['range3_start']) and ($dados['quantity'] <= $print['range3_end'])){				$price = $print['range3_price'];			}elseif(($dados['quantity'] >= $print['range4_start']) and ($dados['quantity'] <= $print['range4_end'])){				$price = $print['range4_price'];			}else{				$price = $print['range5_price'];			}		}		else		{			$price = floatval($print['amount_limit'])/$dados['quantity'];		}		return $price;	}    public function calc_sale_profit($dados,$amount=null)    {    	$config 		= $this->ci->config_model->staticGet();		$gain_unit_val 	= $this->calc_prod_cost($dados);					$profit_unit_val 			= $gain_unit_val['product_unit_price'];			if(isset($amount))				$profit_perc			= $this->calc_val_gain($dados,$amount);			else				$profit_perc			= $this->calc_val_gain($dados);			$print_cost					= $this->calc_price_print($dados) * $dados['qty_colors'];			$profit_price_unit			= ($profit_unit_val + $print_cost);			$profit_price_unit			= $profit_price_unit /(1-($profit_perc/100));				$data = array(			'profit_unit_val' 			=> $profit_unit_val,			'profit_perc'				=> $profit_perc,			'profit_price_unit'			=> $profit_price_unit,			);		return $data;     }	private function calc_val_gain($dados,$amount=null){		$config	= $this->ci->config_model->staticGet();		if(isset($amount))		{			if(($amount >= $config['range1_ini']) and ($amount <= $config['range1_fin'])){				$return = $config['range1'];			}elseif (($amount >= $config['range2_ini']) and ($amount <= $config['range2_fin'])) {				$return = $config['range2'];			}elseif(($amount >= $config['range3_ini']) and ($amount <= $config['range3_fin'])){				$return = $config['range3'];			}else{				$return = $config['range4'];			}		}		else		{			$return = '50';		}		return $return;	}	private function calc_discount($val,$perc){		$data['discount'] 		= ($val/100)*$perc;		$data['price'] 			= $val - $data['discount'];		return $data;	}	private function calc_profit($val,$perc){		$data['profit'] 		= ($val/100)*$perc;		$data['price'] 			= $val + $data['profit'];		return $data;	}	private function min_val($prod){		for ($i=0; $i < count($prod); $i++) {			if($prod[$i]['price']!=0)				$aux[$i] = $prod[$i]['price'];		}		if(isset($aux)){			$min = min($aux);			$key = array_search($min, $aux);			$return = array(				'discount_perc'	=>$prod[$key]['discount_perc'],				'discount'		=>$prod[$key]['discount'],				'fk_provider'	=>$prod[$key]['fk_provider'],				'price'			=>$prod[$key]['price']				);		}		else {			$return = array(				'discount_perc'	=> 0,				'discount'		=> 0,				'fk_provider'	=> 0,				'price'			=> 0				);		}		return $return;	}}